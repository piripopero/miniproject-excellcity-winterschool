[
    {
        "id": "58d76596c8a6ccb3",
        "type": "tab",
        "label": "External sources adapter - OpenMeteo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb62fbf51e7a7598",
        "type": "tab",
        "label": "IoT Devices - Simulator",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1779f935cdde8caf",
        "type": "tab",
        "label": "Smart Building",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "90a9c08dfccbeafe",
        "type": "mqtt-broker",
        "name": "MQTT broker mosquitto ",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6d22de409c044fcb",
        "type": "mqtt-broker",
        "name": "LocalHost",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "097614fc9b3a3b0a",
        "type": "inject",
        "z": "58d76596c8a6ccb3",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "e9a369f379fc1bc1"
            ]
        ]
    },
    {
        "id": "6f30cddddc02e7e3",
        "type": "comment",
        "z": "58d76596c8a6ccb3",
        "name": "Variables Initialization",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "e9a369f379fc1bc1",
        "type": "change",
        "z": "58d76596c8a6ccb3",
        "name": "set flow variables",
        "rules": [
            {
                "t": "set",
                "p": "openmeteo_url",
                "pt": "flow",
                "to": "https://api.open-meteo.com",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_endpoint",
                "pt": "flow",
                "to": "/v1/forecast",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_latitude",
                "pt": "flow",
                "to": "38.02112781484165",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_longitude",
                "pt": "flow",
                "to": "-1.1730213136053926",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_currentattributes",
                "pt": "flow",
                "to": "temperature_2m,relative_humidity_2m,apparent_temperature,precipitation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_timezone",
                "pt": "flow",
                "to": "GMT",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_forecastdays",
                "pt": "flow",
                "to": "1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_hourlyattributes",
                "pt": "flow",
                "to": "temperature_2m,relative_humidity_2m,apparent_temperature,precipitation_probability",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "openmeteo_dailyattributes",
                "pt": "flow",
                "to": "temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6eaa080d9905be28",
        "type": "comment",
        "z": "58d76596c8a6ccb3",
        "name": "Query to OpenMeteo API ",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "33f3fd9c3d167a0f",
        "type": "inject",
        "z": "58d76596c8a6ccb3",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "f3d39ddee8c29995"
            ]
        ]
    },
    {
        "id": "f3d39ddee8c29995",
        "type": "change",
        "z": "58d76596c8a6ccb3",
        "name": "prepare Query",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$flowContext(\"openmeteo_url\") & $flowContext(\"openmeteo_endpoint\") & \"?latitude=\" & $flowContext(\"openmeteo_latitude\") & \"&longitude=\" & $flowContext(\"openmeteo_longitude\") & \"&current=\" & $flowContext(\"openmeteo_currentattributes\") & \"&hourly=\" & $flowContext(\"openmeteo_hourlyattributes\") &  \"&daily=\" & $flowContext(\"openmeteo_dailyattributes\") &\"&timezone=\" & $flowContext(\"openmeteo_timezone\") & \"&forecast_days=\"& $flowContext(\"openmeteo_forecastdays\") \t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 540,
        "wires": [
            [
                "33b8068a28734baf"
            ]
        ]
    },
    {
        "id": "33b8068a28734baf",
        "type": "http request",
        "z": "58d76596c8a6ccb3",
        "name": "HTTP Request to OpenMeteo",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 540,
        "wires": [
            [
                "d00ac5b11665a414"
            ]
        ]
    },
    {
        "id": "1c85c8fe1b8ba67d",
        "type": "json",
        "z": "58d76596c8a6ccb3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "c5beb178df3f9426"
            ]
        ]
    },
    {
        "id": "d00ac5b11665a414",
        "type": "switch",
        "z": "58d76596c8a6ccb3",
        "name": "Check if response.code is 200",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 480,
        "wires": [
            [
                "1c85c8fe1b8ba67d"
            ],
            []
        ]
    },
    {
        "id": "bbff06aba2d9d3ac",
        "type": "debug",
        "z": "58d76596c8a6ccb3",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 300,
        "wires": []
    },
    {
        "id": "c5beb178df3f9426",
        "type": "function",
        "z": "58d76596c8a6ccb3",
        "name": "Parse data from response",
        "func": "// Response from the API\nlet response = msg.payload;\n\n// Get current data\nlet current = {\n    time: new Date(response.current.time).toISOString(),\n    temperature: response.current.temperature_2m,\n    humidity: response.current.relative_humidity_2m,\n    apparent_temperature: response.current.apparent_temperature,\n    precipitation: response.current.precipitation\n};\n// Get the current time and calculate the next hour\nlet now = new Date(response.current.time);\nlet nextHour = new Date(now);\nnextHour.setHours(nextHour.getHours() + 1);\n\n// Format the next hour to match the hourly data format in \"1970-01-01T00:00:00Z\" format\nlet nextHourString = nextHour.toISOString().replace(/:\\d{2}:\\d{2}\\..*/, \":00\");\n\n// Find the index of the next hour in the hourly data\nlet nextHourIndex = response.hourly.time.findIndex(time => time === nextHourString);\n\n// If the next hour is found, extract the information\nlet nextHourForecast = {};\nif (nextHourIndex !== -1) {\n    nextHourForecast = {\n        time: new Date(response.hourly.time[nextHourIndex]).toISOString(),\n        temperature: response.hourly.temperature_2m[nextHourIndex],\n        humidity: response.hourly.relative_humidity_2m[nextHourIndex],\n        apparent_temperature: response.hourly.apparent_temperature[nextHourIndex],\n        precipitation_probability: response.hourly.precipitation_probability[nextHourIndex]\n    };\n} else {\n    nextHourForecast = { error: \"No information found for the next hour\" };\n}\n\n// Get daily maximums and minimums\nlet daily = {\n    date: new Date(response.daily.time[0]).toISOString(),\n    temperature_max: response.daily.temperature_2m_max[0],\n    temperature_min: response.daily.temperature_2m_min[0],\n    apparent_temperature_max: response.daily.apparent_temperature_max[0],\n    apparent_temperature_min: response.daily.apparent_temperature_min[0]\n};\n\n// Create an object with all the extracted information\nlet forecast = {\n    current: current,\n    nextHourForecast: nextHourForecast,\n    daily: daily\n};\n\n// Update the message payload\nmsg.payload = forecast;\n\n// Return the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 680,
        "wires": [
            [
                "bbff06aba2d9d3ac"
            ]
        ]
    },
    {
        "id": "1ad1e99b391d85bb",
        "type": "mqtt out",
        "z": "bb62fbf51e7a7598",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "90a9c08dfccbeafe",
        "x": 990,
        "y": 160,
        "wires": []
    },
    {
        "id": "9d1bc7bd9a4c3e61",
        "type": "inject",
        "z": "bb62fbf51e7a7598",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "92baa7a4910c29d6"
            ]
        ]
    },
    {
        "id": "cee275447c96ebac",
        "type": "function",
        "z": "bb62fbf51e7a7598",
        "name": "function 1",
        "func": "function getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\nnode.log(getRandomInt(30));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "67b33cf5e9f1164c",
        "type": "comment",
        "z": "bb62fbf51e7a7598",
        "name": "Sending mqtt messages simulating the temperature sensor",
        "info": "",
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "3a792c0105d1caa4",
        "type": "change",
        "z": "bb62fbf51e7a7598",
        "name": "Define Topic with API KEY + DeviceID",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "/test/device1/attrs",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "1ad1e99b391d85bb"
            ]
        ]
    },
    {
        "id": "92baa7a4910c29d6",
        "type": "change",
        "z": "bb62fbf51e7a7598",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"t\": $random()*2+20\t    \t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "3a792c0105d1caa4"
            ]
        ]
    },
    {
        "id": "7be648647f3df189",
        "type": "inject",
        "z": "1779f935cdde8caf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 240,
        "wires": [
            [
                "8df94266d44e62c4"
            ]
        ]
    },
    {
        "id": "8df94266d44e62c4",
        "type": "function",
        "z": "1779f935cdde8caf",
        "name": "function 3",
        "func": "msg.method = \"PATCH\";\nmsg.url = \"http://localhost:1026/ngsi-ld/v1/entities/urn:ngsi-ld:DeviceMeasurement:Temperature001/attrs\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\n// Obtén la fecha actual en formato ISO 8601\nconst currentDate = new Date().toISOString();\n\nmsg.payload = {\n    \"value\": {\n        \"type\": \"Property\",\n        \"value\": Math.random() * (30 - 20) + 20, // Simula la temperatura entre 20 y 30 grados\n        \"unitCode\": \"CEL\",\n        \"observedAt\": currentDate // Agrega la fecha actual\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            [
                "a0471b66930b8d8f",
                "760ee895d7d6921a"
            ]
        ]
    },
    {
        "id": "fb8097b29ac47bcd",
        "type": "debug",
        "z": "1779f935cdde8caf",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 240,
        "wires": []
    },
    {
        "id": "a0471b66930b8d8f",
        "type": "debug",
        "z": "1779f935cdde8caf",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 320,
        "wires": []
    },
    {
        "id": "c97f4438454a6539",
        "type": "mqtt in",
        "z": "1779f935cdde8caf",
        "name": "",
        "topic": "/SmartBuilding/umu/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6d22de409c044fcb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 550,
        "y": 480,
        "wires": [
            [
                "e3ae21b0e7ca4ac1"
            ]
        ]
    },
    {
        "id": "e3ae21b0e7ca4ac1",
        "type": "function",
        "z": "1779f935cdde8caf",
        "name": "function 4",
        "func": "// Recibe el mensaje del topic\nlet inputMsg = msg.payload;\n\n// Extrae el ID de la entidad y el tipo de atributo del mensaje recibido\nlet entityId = inputMsg.id;\nlet entityType = inputMsg.type;\nlet attributeKey = Object.keys(inputMsg).find(key => key !== 'id' && key !== 'type');  // Encuentra el nombre del atributo dinámicamente\n\n// Extrae los datos del atributo (como valor y unitCode)\nlet attributeData = inputMsg[attributeKey];\n\n// Obtén la fecha actual en formato ISO 8601\nconst currentDate = new Date().toISOString();\n\n// Construye el mensaje de salida\nmsg.method = \"PATCH\";\nmsg.url = `http://localhost:1026/ngsi-ld/v1/entities/${entityId}/attrs`;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\n// Crea el payload con el formato esperado por NGSI-LD\nmsg.payload = {\n    [attributeKey]: {\n        \"type\": attributeData.type,\n        \"value\": attributeData.value,  // Utiliza el valor original del mensaje entrante\n        \"unitCode\": attributeData.unitCode,\n        \"observedAt\": currentDate // Agrega la fecha actual\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 600,
        "wires": [
            [
                "b4c3bafe098a83cf",
                "8538bbbadd797c86"
            ]
        ]
    },
    {
        "id": "760ee895d7d6921a",
        "type": "http request",
        "z": "1779f935cdde8caf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1026/ngsi-ld/v1/entities/urn:ngsi-ld:DeviceMeasurement:Temperature001/attrs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 240,
        "wires": [
            [
                "fb8097b29ac47bcd"
            ]
        ]
    },
    {
        "id": "b4c3bafe098a83cf",
        "type": "debug",
        "z": "1779f935cdde8caf",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 680,
        "wires": []
    },
    {
        "id": "8538bbbadd797c86",
        "type": "http request",
        "z": "1779f935cdde8caf",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1026/ngsi-ld/v1/entities/urn:ngsi-ld:DeviceMeasurement:Temperature001/attrs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 600,
        "wires": [
            [
                "eb85382cdbe90eb8"
            ]
        ]
    },
    {
        "id": "eb85382cdbe90eb8",
        "type": "debug",
        "z": "1779f935cdde8caf",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 600,
        "wires": []
    },
    {
        "id": "5dde4f2cd2542b5c",
        "type": "mqtt in",
        "z": "1779f935cdde8caf",
        "name": "",
        "topic": "/SmartBuilding/umu/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6d22de409c044fcb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 500,
        "y": 760,
        "wires": [
            [
                "759070221480ded0"
            ]
        ]
    },
    {
        "id": "759070221480ded0",
        "type": "function",
        "z": "1779f935cdde8caf",
        "name": "function 5",
        "func": "// Recibe el mensaje del topic\nlet inputMsg = msg.payload;\n\n// Extrae el ID de la entidad y el tipo de atributo del mensaje recibido\nlet entityId = inputMsg.id;\nlet entityType = inputMsg.type;\nlet attributeKey = Object.keys(inputMsg).find(key => key !== 'id' && key !== 'type');  // Encuentra el nombre del atributo dinámicamente\n\n// Extrae los datos del atributo (como valor y unitCode)\nlet attributeData = inputMsg[attributeKey];\n\n// Obtén la fecha actual en formato ISO 8601\nconst currentDate = new Date().toISOString();\n\n// Construye el mensaje de salida\nmsg.method = \"PATCH\";\nmsg.url = `http://localhost:1026/ngsi-ld/v1/entities/${entityId}/attrs`;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\n// Crea el payload con el formato esperado por NGSI-LD\nmsg.payload = {\n    [attributeKey]: {\n        \"type\": attributeData.type,\n        \"value\": attributeData.value,  // Utiliza el valor original del mensaje entrante\n        \"unitCode\": attributeData.unitCode,\n        \"observedAt\": currentDate // Agrega la fecha actual\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 880,
        "wires": [
            [
                "5610fb7ba80f9794",
                "358cbbe62f58f46a"
            ]
        ]
    },
    {
        "id": "5610fb7ba80f9794",
        "type": "debug",
        "z": "1779f935cdde8caf",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 960,
        "wires": []
    },
    {
        "id": "358cbbe62f58f46a",
        "type": "http request",
        "z": "1779f935cdde8caf",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1026/ngsi-ld/v1/entities/urn:ngsi-ld:DeviceMeasurement:Temperature001/attrs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 880,
        "wires": [
            [
                "ebb913a55c43b572"
            ]
        ]
    },
    {
        "id": "ebb913a55c43b572",
        "type": "debug",
        "z": "1779f935cdde8caf",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 880,
        "wires": []
    }
]